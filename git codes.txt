Creating new repository (steps)
1. Create a new repository on GitHub. To avoid errors, do not initialize the new repository with README, license, or gitignore files. You can add these files after your project has been pushed to GitHub.

2. Open Terminal (for Mac users) or the command prompt (for Windows and Linux users).

3. Change the current working directory to your local project.

4. Initialize the local directory as a Git repository.

    $ git init

5. Add the files in your new local repository. This stages them for the first commit.

    $ git add .
    # Adds the files in the local repository and stages them for commit. To unstage a file, use 'git reset HEAD YOUR-FILE'.

6. Commit the files that you've staged in your local repository.

    $ git commit -m 'First commit'
    # Commits the tracked changes and prepares them to be pushed to a remote repository. To remove this commit and modify the file, use 'git reset --soft HEAD~1' and commit and add the file again.

7. Copy remote repository URL field at the top of your GitHub repository's Quick Setup page, click to copy the remote repository URL.
   In the Command prompt, add the URL for the remote repository where your local repository will be pushed.

    $ git remote add origin remote repository URL
    # Sets the new remote
    $ git remote -v
    # Verifies the new remote URL

Note: GitHub for Windows users should use the command git remote set-url origin instead of git remote add origin here.

8. Push the changes in your local repository to GitHub.

    $ git push origin master
    # Pushes the changes in your local repository up to the remote repository you specified as the origin

################### CODES #######################

Delete remote origin

$ git remote rm origin

Clone an existing repository in GitHub

$ git clone https://github.com/*.git

Create the branch on your local machine and switch in this branch :

$ git checkout -b [name_of_your_new_branch]

Push the branch on github :

$ git push origin [name_of_your_new_branch]

When you want to commit something in your branch, be sure to be in your branch.

You can see all branches created by using :

$ git branch

Which will show :

* approval_messages
  master
  master_clean

Add a new remote for your branch :

$ git remote add [name_of_your_remote] 

Push changes from your commit into your branch :

$ git push origin [name_of_your_remote]

Update your branch when the original branch from official repository has been updated :

$ git fetch [name_of_your_remote]

Then you need to apply to merge changes, if your branch is derivated from develop you need to do :

$ git merge [name_of_your_remote]/develop

Delete a branch on your local filesystem :

$ git branch -d [name_of_your_new_branch]

To force the deletion of local branch on your filesystem :

$ git branch -D [name_of_your_new_branch]

Delete the branch on github :

$ git push origin :[name_of_your_new_branch]


Config credential storage (no user&pass login)

$ git config --global credential.helper cache
	or
$ git config --global credential.helper store --file ~/.my-credentials

Create a stash

$ git stash

Stash list

$ git stash list

Reapply stash

$ git stash apply	//most recent stash
	or
$ git stash apply stash@{2}	//no. of stash

Delete a stash

$ git stash drop stash@{0}	//no. of stash
	or
$ git stash pop	//apply the stash and drop

Branch from a stash

$ git stash branch

Cleaning

$ git clean

Avoid merge conflict

$ git pull --rebase

$ git rebase --continue

Always rebase when pulling

$ git config branch.master.rebase true

Config option to always rebase when pulling

$ git config --global branch.autosetuprebase always

Temporarily stores passwords (timeout is in seconds)

$ git config credential.helper 'cache --timeout=300'