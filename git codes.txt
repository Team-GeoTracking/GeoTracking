Clone an existing repository in GitHub

$ git clone https://github.com/*.git

Create the branch on your local machine and switch in this branch :

$ git checkout -b [name_of_your_new_branch]

Push the branch on github :

$ git push origin [name_of_your_new_branch]

When you want to commit something in your branch, be sure to be in your branch.

You can see all branches created by using :

$ git branch

Which will show :

* approval_messages
  master
  master_clean

Add a new remote for your branch :

$ git remote add [name_of_your_remote] 

Push changes from your commit into your branch :

$ git push origin [name_of_your_remote]

Update your branch when the original branch from official repository has been updated :

$ git fetch [name_of_your_remote]

Then you need to apply to merge changes, if your branch is derivated from develop you need to do :

$ git merge [name_of_your_remote]/develop

Delete a branch on your local filesystem :

$ git branch -d [name_of_your_new_branch]

To force the deletion of local branch on your filesystem :

$ git branch -D [name_of_your_new_branch]

Delete the branch on github :

$ git push origin :[name_of_your_new_branch]


Config credential storage (no user&pass login)

$ git config --global credential.helper cache
	or
$ git config --global credential.helper store --file ~/.my-credentials

Create a stash

$ git stash

Stash list

$ git stash list

Reapply stash

$ git stash apply	//most recent stash
	or
$ git stash apply stash@{2}	//no. of stash

Delete a stash

$ git stash drop stash@{0}	//no. of stash
	or
$ git stash pop	//apply the stash and drop

Branch from a stash

$ git stash branch

Cleaning

$ git clean

Avoid merge conflict

$ git pull --rebase

$ git rebase --continue

Always rebase when pulling

$ git config branch.master.rebase true

Config option to always rebase when pulling

$ git config --global branch.autosetuprebase always